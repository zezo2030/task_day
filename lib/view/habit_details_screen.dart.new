import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:task_day/models/habit_model.dart';
import 'dart:math' as math;

class HabitDetailsScreen extends StatefulWidget {
  final HabitModel habit;

  const HabitDetailsScreen({super.key, required this.habit});

  @override
  State<HabitDetailsScreen> createState() => _HabitDetailsScreenState();
}

class _HabitDetailsScreenState extends State<HabitDetailsScreen>
    with SingleTickerProviderStateMixin {
  late HabitModel _habit;
  late AnimationController _animationController;
  late Animation<double> _fadeInAnimation;
  late Animation<double> _slideAnimation;
  late Animation<double> _scaleAnimation;
  late Animation<double> _shimmerAnimation;
  
  // Animation flags for action effects
  bool _isIncrementAnimating = false;
  bool _isDecrementAnimating = false;
  bool _isCompletionAnimating = false;

  @override
  void initState() {
    super.initState();
    _habit = widget.habit;
    
    // Initialize animation controller
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    );
    
    // Create animations
    _fadeInAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.6, curve: Curves.easeOut),
      ),
    );
    
    _slideAnimation = Tween<double>(begin: 50.0, end: 0.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.6, curve: Curves.easeOutQuart),
      ),
    );
    
    _scaleAnimation = Tween<double>(begin: 0.8, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 0.6, curve: Curves.easeOut),
      ),
    );
    
    // Shimmer animation that loops continuously
    _shimmerAnimation = Tween<double>(begin: -1.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: const Interval(0.0, 1.0, curve: Curves.easeInOut),
      ),
    );

    // Start animation once without repeating
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Get the habit color
    final Color habitColor = _habit.color;

    // Calculate progress
    final double progress = _habit.progress;

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            const Color(0xFF191B2F),
            const Color(0xFF0F1227),
            const Color(0xFF05060D),
          ],
          stops: const [0.1, 0.5, 0.9],
        ),
      ),
      child: Scaffold(
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          leading: IconButton(
            icon: Container(
              padding: EdgeInsets.all(8.w),
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                color: Colors.white.withOpacity(0.1),
              ),
              child: Icon(
                Icons.arrow_back_ios_new,
                color: Colors.white,
                size: 18.sp,
              ),
            ),
            onPressed: () => Navigator.pop(context, _habit),
          ),
          actions: [
            IconButton(
              icon: Container(
                padding: EdgeInsets.all(8.w),
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.white.withOpacity(0.1),
                ),
                child: Icon(
                  Icons.edit_outlined,
                  color: Colors.white,
                  size: 18.sp,
                ),
              ),
              onPressed: () {
                // Navigate to edit screen (not implemented yet)
              },
            ),
            SizedBox(width: 8.w),
          ],
        ),
        body: SafeArea(
          child: Stack(
            children: [
              // Background decorative elements
              Positioned(
                top: -50.h,
                right: -30.w,
                child: Container(
                  height: 220.h,
                  width: 220.w,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: habitColor.withOpacity(0.08),
                  ),
                ),
              ),
              Positioned(
                bottom: 150.h,
                left: -70.w,
                child: Container(
                  height: 170.h,
                  width: 170.w,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: const Color(0xFF818CF8).withOpacity(0.07),
                  ),
                ),
              ),

              // Main content
              SingleChildScrollView(
                physics: BouncingScrollPhysics(),
                child: AnimatedBuilder(
                  animation: _animationController,
                  builder: (context, child) {
                    return Transform.translate(
                      offset: Offset(0, _slideAnimation.value),
                      child: Opacity(
                        opacity: _fadeInAnimation.value,
                        child: Transform.scale(
                          scale: _scaleAnimation.value,
                          child: child,
                        ),
                      ),
                    );
                  },
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Header section with title and completion status
                      Padding(
                        padding: EdgeInsets.symmetric(
                          horizontal: 24.w,
                          vertical: 8.h,
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Habit type indicator
                            Row(
                              children: [
                                Container(
                                  padding: EdgeInsets.symmetric(
                                    horizontal: 12.w,
                                    vertical: 6.h,
                                  ),
                                  decoration: BoxDecoration(
                                    color: habitColor.withOpacity(0.15),
                                    borderRadius: BorderRadius.circular(12.r),
                                  ),
                                  child: Text(
                                    _habit.isMeasurable
                                        ? 'Measurable Habit'
                                        : 'Regular Habit',
                                    style: GoogleFonts.poppins(
                                      fontSize: 12.sp,
                                      fontWeight: FontWeight.w600,
                                      color: habitColor,
                                    ),
                                  ),
                                ),
                                const Spacer(),
                                // Complete today button/status
                                if (!_habit.isMeasurable)
                                  InkWell(
                                    onTap: _toggleHabitCompletion,
                                    borderRadius: BorderRadius.circular(12.r),
                                    child: AnimatedContainer(
                                      duration: const Duration(milliseconds: 300),
                                      transform: _isCompletionAnimating 
                                          ? (Matrix4.identity()..scale(1.1))
                                          : Matrix4.identity(),
                                      padding: EdgeInsets.symmetric(
                                        horizontal: 12.w,
                                        vertical: 6.h,
                                      ),
                                      decoration: BoxDecoration(
                                        color:
                                            _isCompletedToday()
                                                ? Colors.green.withOpacity(0.15)
                                                : Colors.grey.withOpacity(0.15),
                                        borderRadius: BorderRadius.circular(12.r),
                                        boxShadow: _isCompletionAnimating 
                                            ? [
                                                BoxShadow(
                                                  color: _isCompletedToday()
                                                      ? Colors.green.withOpacity(0.3)
                                                      : Colors.grey.withOpacity(0.3),
                                                  blurRadius: 12,
                                                  spreadRadius: 2,
                                                )
                                              ]
                                            : null,
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            _isCompletedToday()
                                                ? Icons.check_circle
                                                : Icons.circle_outlined,
                                            color:
                                                _isCompletedToday()
                                                    ? Colors.green
                                                    : Colors.grey,
                                            size: 16.sp,
                                          ),
                                          SizedBox(width: 6.w),
                                          Text(
                                            _isCompletedToday()
                                                ? 'Completed Today'
                                                : 'Mark as Done',
                                            style: GoogleFonts.poppins(
                                              fontSize: 12.sp,
                                              fontWeight: FontWeight.w600,
                                              color:
                                                  _isCompletedToday()
                                                      ? Colors.green
                                                      : Colors.grey,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                  ),
                                // Status indicator for measurable habits
                                if (_habit.isMeasurable && _habit.targetValue != null)
                                  Container(
                                    padding: EdgeInsets.symmetric(
                                      horizontal: 12.w,
                                      vertical: 6.h,
                                    ),
                                    decoration: BoxDecoration(
                                      color: _isTargetReached() 
                                          ? Colors.green.withOpacity(0.15)
                                          : habitColor.withOpacity(0.15),
                                      borderRadius: BorderRadius.circular(12.r),
                                    ),
                                    child: Row(
                                      children: [
                                        Icon(
                                          _isTargetReached()
                                              ? Icons.check_circle
                                              : Icons.trending_up,
                                          color: _isTargetReached()
                                              ? Colors.green
                                              : habitColor,
                                          size: 16.sp,
                                        ),
                                        SizedBox(width: 6.w),
                                        Text(
                                          _isTargetReached()
                                              ? 'Target Reached'
                                              : 'In Progress',
                                          style: GoogleFonts.poppins(
                                            fontSize: 12.sp,
                                            fontWeight: FontWeight.w600,
                                            color: _isTargetReached()
                                                ? Colors.green
                                                : habitColor,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                              ],
                            ),

                            SizedBox(height: 20.h),

                            // Habit title with icon
                            AnimatedBuilder(
                              animation: _animationController,
                              builder: (context, child) {
                                return Transform.translate(
                                  offset: Offset(
                                    0,
                                    (1 - _animationController.value) * 30,
                                  ),
                                  child: Opacity(
                                    opacity: _animationController.value,
                                    child: child,
                                  ),
                                );
                              },
                              child: Row(
                                children: [
                                  Container(
                                    padding: EdgeInsets.all(10.w),
                                    decoration: BoxDecoration(
                                      color: habitColor.withOpacity(0.1),
                                      shape: BoxShape.circle,
                                    ),
                                    child: Icon(
                                      _habit.icon,
                                      color: habitColor,
                                      size: 24.sp,
                                    ),
                                  ),
                                  SizedBox(width: 12.w),
                                  Expanded(
                                    child: Text(
                                      _habit.title,
                                      style: GoogleFonts.poppins(
                                        fontSize: 24.sp,
                                        fontWeight: FontWeight.bold,
                                        foreground: Paint()
                                          ..shader = LinearGradient(
                                            colors: [
                                              _habit.color.withOpacity(0.7),
                                              Colors.white,
                                              _habit.color,
                                            ],
                                            stops: const [0.0, 0.5, 1.0],
                                          ).createShader(
                                            Rect.fromLTWH(0, 0, 200.w, 70.h),
                                          ),
                                        height: 1.2,
                                      ),
                                      maxLines: 2,
                                      overflow: TextOverflow.ellipsis,
                                    ),
                                  ),
                                ],
                              ),
                            ),

                            SizedBox(height: 20.h),

                            // Habit created date
                            Row(
                              children: [
                                Icon(
                                  Icons.calendar_today_outlined,
                                  color: Colors.white.withOpacity(0.7),
                                  size: 18.sp,
                                ),
                                SizedBox(width: 8.w),
                                Text(
                                  "Created on ${DateFormat('MMM d, y').format(_habit.createdAt)}",
                                  style: GoogleFonts.poppins(
                                    fontSize: 14.sp,
                                    color: Colors.white.withOpacity(0.7),
                                  ),
                                ),
                              ],
                            ),

                            SizedBox(height: 20.h),

                            // Progress section for measurable habits
                            if (_habit.isMeasurable && _habit.targetValue != null) ...[
                              FadeTransition(
                                opacity: Tween<double>(begin: 0.0, end: 1.0).animate(
                                  CurvedAnimation(
                                    parent: _animationController,
                                    curve: const Interval(0.3, 0.8, curve: Curves.easeOut),
                                  ),
                                ),
                                child: SlideTransition(
                                  position: Tween<Offset>(
                                    begin: const Offset(0, 0.2),
                                    end: Offset.zero,
                                  ).animate(
                                    CurvedAnimation(
                                      parent: _animationController,
                                      curve: const Interval(0.3, 0.8, curve: Curves.easeOut),
                                    ),
                                  ),
                                  child: Column(
                                    children: [
                                      Row(
                                        children: [
                                          Text(
                                            "Progress:",
                                            style: GoogleFonts.poppins(
                                              fontSize: 14.sp,
                                              fontWeight: FontWeight.w500,
                                              color: Colors.white.withOpacity(0.7),
                                            ),
                                          ),
                                          SizedBox(width: 8.w),
                                          Text(
                                            "${_habit.currentValue ?? 0} of ${_habit.targetValue}",
                                            style: GoogleFonts.poppins(
                                              fontSize: 14.sp,
                                              fontWeight: FontWeight.w600,
                                              color: Colors.white,
                                            ),
                                          ),
                                          const Spacer(),
                                          Text(
                                            "${(progress * 100).toInt()}%",
                                            style: GoogleFonts.poppins(
                                              fontSize: 14.sp,
                                              fontWeight: FontWeight.w600,
                                              color: habitColor,
                                            ),
                                          ),
                                        ],
                                      ),
                                      SizedBox(height: 8.h),
                                      // Animated progress bar
                                      TweenAnimationBuilder<double>(
                                        duration: const Duration(milliseconds: 1000),
                                        curve: Curves.easeOutQuart,
                                        tween: Tween<double>(begin: 0.0, end: progress),
                                        builder: (context, animValue, child) {
                                          return ClipRRect(
                                            borderRadius: BorderRadius.circular(10.r),
                                            child: LinearProgressIndicator(
                                              value: animValue,
                                              backgroundColor: Colors.white.withOpacity(0.1),
                                              valueColor: AlwaysStoppedAnimation<Color>(
                                                habitColor,
                                              ),
                                              minHeight: 8.h,
                                            ),
                                          );
                                        },
                                      ),
                                      SizedBox(height: 20.h),
                                      
                                      // Increment/decrement buttons for measurable habits
                                      Row(
                                        mainAxisAlignment: MainAxisAlignment.center,
                                        children: [
                                          // Decrement button
                                          AnimatedScale(
                                            scale: _isDecrementAnimating ? 1.1 : 1.0,
                                            duration: const Duration(milliseconds: 200),
                                            child: _buildActionButton(
                                              onTap: _decrementValue,
                                              icon: Icons.remove,
                                              color: Colors.redAccent,
                                            ),
                                          ),
                                          
                                          SizedBox(width: 16.w),
                                          
                                          // Value display
                                          AnimatedScale(
                                            scale: _isIncrementAnimating || _isDecrementAnimating ? 1.1 : 1.0,
                                            duration: const Duration(milliseconds: 200),
                                            child: Container(
                                              padding: EdgeInsets.symmetric(
                                                horizontal: 20.w,
                                                vertical: 10.h,
                                              ),
                                              decoration: BoxDecoration(
                                                color: Colors.white.withOpacity(0.05),
                                                borderRadius: BorderRadius.circular(10.r),
                                              ),
                                              child: Text(
                                                "${_habit.currentValue ?? 0}",
                                                style: GoogleFonts.poppins(
                                                  fontSize: 24.sp,
                                                  fontWeight: FontWeight.bold,
                                                  color: Colors.white,
                                                ),
                                              ),
                                            ),
                                          ),
                                          
                                          SizedBox(width: 16.w),
                                          
                                          // Increment button
                                          AnimatedScale(
                                            scale: _isIncrementAnimating ? 1.1 : 1.0,
                                            duration: const Duration(milliseconds: 200),
                                            child: _buildActionButton(
                                              onTap: _incrementValue,
                                              icon: Icons.add,
                                              color: Colors.greenAccent,
                                            ),
                                          ),
                                        ],
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],

                            SizedBox(height: 24.h),

                            // Description section
                            Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Description",
                                  style: GoogleFonts.poppins(
                                    fontSize: 18.sp,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.white,
                                  ),
                                ),
                                SizedBox(height: 10.h),
                                Container(
                                  padding: EdgeInsets.all(16.w),
                                  decoration: BoxDecoration(
                                    color: Colors.white.withOpacity(0.05),
                                    borderRadius: BorderRadius.circular(16.r),
                                    border: Border.all(
                                      color: Colors.white.withOpacity(0.1),
                                      width: 1,
                                    ),
                                    boxShadow: [
                                      BoxShadow(
                                        color: _habit.color.withOpacity(0.1),
                                        blurRadius: 10,
                                        spreadRadius: 2,
                                      ),
                                    ],
                                  ),
                                  child: Text(
                                    _habit.description,
                                    style: GoogleFonts.poppins(
                                      fontSize: 14.sp,
                                      color: Colors.white.withOpacity(0.8),
                                      height: 1.5,
                                    ),
                                  ),
                                ),
                              ],
                            ),

                            SizedBox(height: 24.h),
                          ],
                        ),
                      ),

                      // Completion history section
                      Padding(
                        padding: EdgeInsets.symmetric(horizontal: 24.w),
                        child: FadeTransition(
                          opacity: Tween<double>(begin: 0.0, end: 1.0).animate(
                            CurvedAnimation(
                              parent: _animationController,
                              curve: const Interval(0.5, 1.0, curve: Curves.easeOut),
                            ),
                          ),
                          child: SlideTransition(
                            position: Tween<Offset>(
                              begin: const Offset(0, 0.3),
                              end: Offset.zero,
                            ).animate(
                              CurvedAnimation(
                                parent: _animationController,
                                curve: const Interval(0.5, 1.0, curve: Curves.easeOut),
                              ),
                            ),
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Completion History",
                                  style: GoogleFonts.poppins(
                                    fontSize: 18.sp,
                                    fontWeight: FontWeight.w600,
                                    color: Colors.white,
                                  ),
                                ),
                                SizedBox(height: 16.h),
                                _buildCompletionHistory(),
                                SizedBox(height: 30.h),
                              ],
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Helper method to build increment/decrement buttons
  Widget _buildActionButton({
    required VoidCallback onTap,
    required IconData icon,
    required Color color,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(10.r),
      child: Container(
        padding: EdgeInsets.all(12.w),
        decoration: BoxDecoration(
          color: color.withOpacity(0.15),
          borderRadius: BorderRadius.circular(10.r),
        ),
        child: Icon(icon, color: color, size: 24.sp),
      ),
    );
  }

  // Helper method to build completion history
  Widget _buildCompletionHistory() {
    if (_habit.completedDates.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.calendar_today,
              size: 60.sp,
              color: Colors.white.withOpacity(0.2),
            ),
            SizedBox(height: 16.h),
            Text(
              "No completion records yet",
              style: GoogleFonts.poppins(
                fontSize: 16.sp,
                fontWeight: FontWeight.w500,
                color: Colors.white.withOpacity(0.5),
              ),
            ),
            SizedBox(height: 8.h),
            Text(
              "Complete this habit to start tracking your progress",
              style: GoogleFonts.poppins(
                fontSize: 14.sp,
                color: Colors.white.withOpacity(0.3),
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      );
    }

    // Sort dates from newest to oldest
    final sortedDates = List<DateTime>.from(_habit.completedDates)
      ..sort((a, b) => b.compareTo(a));

    return Container(
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.05),
        borderRadius: BorderRadius.circular(16.r),
      ),
      child: ListView.separated(
        physics: NeverScrollableScrollPhysics(),
        shrinkWrap: true,
        itemCount: sortedDates.length,
        separatorBuilder: (context, index) => Divider(
          color: Colors.white.withOpacity(0.1),
          height: 1,
        ),
        itemBuilder: (context, index) {
          final date = sortedDates[index];
          
          return ListTile(
            leading: Container(
              padding: EdgeInsets.all(8.w),
              decoration: BoxDecoration(
                color: _habit.color.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(
                Icons.check,
                color: _habit.color,
                size: 20.sp,
              ),
            ),
            title: Text(
              DateFormat('EEEE, MMM dd, yyyy').format(date),
              style: GoogleFonts.poppins(
                fontSize: 14.sp,
                fontWeight: FontWeight.w500,
                color: Colors.white,
              ),
            ),
            subtitle: Text(
              DateFormat('hh:mm a').format(date),
              style: GoogleFonts.poppins(
                fontSize: 12.sp,
                color: Colors.white.withOpacity(0.6),
              ),
            ),
          );
        },
      ),
    );
  }

  // Check if measurable habit target is reached today
  bool _isTargetReached() {
    if (!_habit.isMeasurable || _habit.targetValue == null) return false;
    
    // Check if current value meets or exceeds target
    if ((_habit.currentValue ?? 0) >= _habit.targetValue!) {
      return true;
    }
    
    // Also check completed dates for today
    return _isCompletedToday();
  }

  // Check if habit is completed today
  bool _isCompletedToday() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    
    return _habit.completedDates.any((date) {
      final habitDate = DateTime(date.year, date.month, date.day);
      return habitDate.isAtSameMomentAs(today);
    });
  }

  // Toggle habit completion for today with animation effect
  void _toggleHabitCompletion() {
    final now = DateTime.now();
    final today = DateTime(now.year, now.month, now.day);
    
    setState(() {
      _isCompletionAnimating = true;
      
      if (_isCompletedToday()) {
        // Remove today's completion
        _habit = _habit.copyWith(
          completedDates: _habit.completedDates
              .where((date) {
                final habitDate = DateTime(date.year, date.month, date.day);
                return !habitDate.isAtSameMomentAs(today);
              })
              .toList(),
        );
      } else {
        // Add today's completion
        _habit = _habit.copyWith(
          completedDates: [..._habit.completedDates, now],
        );
      }
      
      // Reset animation state after short delay
      Future.delayed(const Duration(milliseconds: 500), () {
        if (mounted) {
          setState(() {
            _isCompletionAnimating = false;
          });
        }
      });
    });
  }

  // Increment the current value for measurable habits
  void _incrementValue() {
    if (_habit.isMeasurable && _habit.targetValue != null) {
      final currentValue = _habit.currentValue ?? 0;
      if (currentValue < _habit.targetValue!) {
        setState(() {
          _isIncrementAnimating = true;
          _habit = _habit.copyWith(currentValue: currentValue + 1);
          
          // If we reached the target, add to completed dates
          if (currentValue + 1 >= _habit.targetValue!) {
            final now = DateTime.now();
            if (!_isCompletedToday()) {
              _habit = _habit.copyWith(
                completedDates: [..._habit.completedDates, now],
              );
            }
          }
          
          // Reset animation state after short delay
          Future.delayed(const Duration(milliseconds: 500), () {
            if (mounted) {
              setState(() {
                _isIncrementAnimating = false;
              });
            }
          });
        });
      }
    }
  }

  // Decrement the current value for measurable habits
  void _decrementValue() {
    if (_habit.isMeasurable &&
        _habit.currentValue != null &&
        _habit.currentValue! > 0) {
      setState(() {
        _isDecrementAnimating = true;
        final newValue = _habit.currentValue! - 1;
        _habit = _habit.copyWith(currentValue: newValue);
        
        // If we're dropping below target, remove today from completed dates if needed
        if (_habit.targetValue != null && 
            newValue < _habit.targetValue! && 
            _isCompletedToday()) {
          // Only remove today's date if it was added automatically by reaching target
          // (This is a simplified implementation - in a real app, you might want to
          // track why a date was added to make this more precise)
          final now = DateTime.now();
          final today = DateTime(now.year, now.month, now.day);
          
          List<DateTime> filteredDates = _habit.completedDates.where((date) {
            final habitDate = DateTime(date.year, date.month, date.day);
            return !habitDate.isAtSameMomentAs(today);
          }).toList();
          
          _habit = _habit.copyWith(completedDates: filteredDates);
        }
        
        // Reset animation state after short delay
        Future.delayed(const Duration(milliseconds: 500), () {
          if (mounted) {
            setState(() {
              _isDecrementAnimating = false;
            });
          }
        });
      });
    }
  }
} 